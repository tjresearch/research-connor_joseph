{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of PyTorch_CNN","provenance":[{"file_id":"1J6O36fiY3O5urUqGxqGSXj6_t6SaLM4a","timestamp":1570760183139}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"s0u3cBS2SnD6","colab_type":"code","colab":{}},"source":["# importing the libraries\n","import pandas as pd\n","import numpy as np\n","\n","# for reading and displaying images\n","from skimage.io import imread\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","# for creating validation set\n","from sklearn.model_selection import train_test_split\n","\n","# for evaluating the model\n","from sklearn.metrics import accuracy_score\n","from tqdm import tqdm\n","\n","# PyTorch libraries and modules\n","import torch\n","from torch.autograd import Variable\n","from torch.nn import Linear, ReLU, CrossEntropyLoss, Sequential, Conv2d, MaxPool2d, Module, Softmax, BatchNorm2d, Dropout\n","from torch.optim import Adam, SGD\n","\n","import numpy as np\n","from PIL import Image"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XYUYU0rjUybW","colab_type":"code","outputId":"ae300cdf-4f07-4f04-8113-2413fa0dd7f1","executionInfo":{"status":"ok","timestamp":1571359743202,"user_tz":240,"elapsed":32929,"user":{"displayName":"Connor Grimberg","photoUrl":"","userId":"01720205661219630631"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/gdrive', force_remount = True)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"s4DuBLqz6iIz","colab_type":"code","colab":{}},"source":["!fusermount -u drive\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"IoGf3biw8UDJ","colab_type":"code","colab":{}},"source":["!google-drive-ocamlfuse drive"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eYlhn0D7UyaR","colab_type":"code","outputId":"e40a34ce-da3a-4b2c-e5ee-6c81029673e5","executionInfo":{"status":"ok","timestamp":1571359811608,"user_tz":240,"elapsed":512,"user":{"displayName":"Connor Grimberg","photoUrl":"","userId":"01720205661219630631"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["cd .."],"execution_count":6,"outputs":[{"output_type":"stream","text":["/\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sBLghMUFZBnA","colab_type":"code","outputId":"3ee1dd27-763d-4c4b-a0c4-c37c37a8143a","executionInfo":{"status":"ok","timestamp":1571359815499,"user_tz":240,"elapsed":2653,"user":{"displayName":"Connor Grimberg","photoUrl":"","userId":"01720205661219630631"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["cd 'gdrive/My Drive/Senior Year/5th: Senior Research Project with Connor/Dataset/finished'\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["/gdrive/My Drive/Senior Year/5th: Senior Research Project with Connor/Dataset/finished\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ydzueF9ZZNja","colab_type":"code","outputId":"b7b7d27c-654c-4971-ef35-34f4de44b08b","executionInfo":{"status":"ok","timestamp":1571359821949,"user_tz":240,"elapsed":4435,"user":{"displayName":"Connor Grimberg","photoUrl":"","userId":"01720205661219630631"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["ls"],"execution_count":8,"outputs":[{"output_type":"stream","text":["annotations_earthquake.csv  annotations_flooding.gsheet   \u001b[0m\u001b[01;34mgoogle_images\u001b[0m/\n","annotations_fire.csv        annotations_hurricane.csv\n","annotations_flooding.csv    annotations_hurricane.gsheet\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lx3ICbhhVCB_","colab_type":"code","colab":{}},"source":["flood_anns = pd.read_csv('annotations_flooding.csv')\n","hurricane_anns = pd.read_csv('annotations_hurricane.csv')\n","fire_anns = pd.read_csv('annotations_fire.csv')\n","earthquake_anns = pd.read_csv('annotations_earthquake.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"z9z4qhtCWemV","colab_type":"code","colab":{}},"source":["hurricane_anns.dropna(inplace=True)\n","hurricane_anns.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EdIyqOtIWjNf","colab_type":"code","colab":{}},"source":["fire_anns.dropna(inplace=True)\n","fire_anns.reset_index(inplace=True)\n","\n","# img = Image.open('testrgba.png')\n","# array = np.array(img)\n","# print(array.shape) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-kwOLy03nKvA","colab_type":"code","colab":{}},"source":["fire_anns.shape[0]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RByp89BlqEdU","colab_type":"code","colab":{}},"source":["fire_anns.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Yetl9VcvnMC_","colab_type":"code","colab":{}},"source":["for i in range(10):\n","  img = Image.open(hurricane_anns.loc[i, 'photo_ID'])\n","  img_arr = np.array(img)\n","  print(f\"Image {i}\")\n","  print(img_arr)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kf7H8P6KobNK","colab_type":"code","outputId":"aff51642-301a-4a28-d704-d48868d99d64","executionInfo":{"status":"ok","timestamp":1570765884525,"user_tz":240,"elapsed":802,"user":{"displayName":"Connor Grimberg","photoUrl":"","userId":"01720205661219630631"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["cd .."],"execution_count":0,"outputs":[{"output_type":"stream","text":["/gdrive/My Drive/5th: Senior Research Project with Connor/Dataset\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Ckx-YJussM4n","colab_type":"code","outputId":"d0664a9e-d0ed-4513-f9ec-c680096d4d6c","executionInfo":{"status":"ok","timestamp":1570765891504,"user_tz":240,"elapsed":2107,"user":{"displayName":"Connor Grimberg","photoUrl":"","userId":"01720205661219630631"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["ls"],"execution_count":0,"outputs":[{"output_type":"stream","text":[" \u001b[0m\u001b[01;34mearthquake\u001b[0m/   \u001b[01;34mfire_aerial\u001b[0m/  \u001b[01;34m'flooding aerial'\u001b[0m/   \u001b[01;34m'Hurricane Aftermath'\u001b[0m/\n"," \u001b[01;34mfinished\u001b[0m/     \u001b[01;34mflooding\u001b[0m/     \u001b[01;34m'hurricane aerial'\u001b[0m/  \u001b[01;34m'JPG earthquake'\u001b[0m/\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5MPY_gh01c2X","colab_type":"code","colab":{}},"source":["class Net(Module):   \n","    def __init__(self):\n","        super(Net, self).__init__()\n","\n","        self.cnn_layers = Sequential(\n","            # Defining a 2D convolution layer\n","            Conv2d(1, 4, kernel_size=3, stride=1, padding=1),\n","            BatchNorm2d(4),\n","            ReLU(inplace=True),\n","            MaxPool2d(kernel_size=2, stride=2),\n","            # Defining another 2D convolution layer\n","            Conv2d(4, 4, kernel_size=3, stride=1, padding=1),\n","            BatchNorm2d(4),\n","            ReLU(inplace=True),\n","            MaxPool2d(kernel_size=2, stride=2),\n","        )\n","\n","        self.linear_layers = Sequential(\n","            Linear(4 * 7 * 7, 10)\n","        )\n","\n","    # Defining the forward pass    \n","    def forward(self, x):\n","        x = self.cnn_layers(x)\n","        x = x.view(x.size(0), -1)\n","        x = self.linear_layers(x)\n","        return x"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"k0F6g0VxpOM1","colab_type":"code","outputId":"fdb41ddf-7eff-4768-9939-32a03d8a1742","executionInfo":{"status":"ok","timestamp":1570765902323,"user_tz":240,"elapsed":3214,"user":{"displayName":"Connor Grimberg","photoUrl":"","userId":"01720205661219630631"}},"colab":{"base_uri":"https://localhost:8080/","height":272}},"source":["# defining the model\n","model = Net()\n","# defining the optimizer\n","optimizer = Adam(model.parameters(), lr=0.07)\n","# defining the loss function\n","criterion = CrossEntropyLoss()\n","# checking if GPU is available\n","if torch.cuda.is_available():\n","    model = model.cuda()\n","    criterion = criterion.cuda()\n","    \n","print(model)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Net(\n","  (cnn_layers): Sequential(\n","    (0): Conv2d(1, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (1): BatchNorm2d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (2): ReLU(inplace=True)\n","    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (4): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (5): BatchNorm2d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (6): ReLU(inplace=True)\n","    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  )\n","  (linear_layers): Sequential(\n","    (0): Linear(in_features=196, out_features=10, bias=True)\n","  )\n",")\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RQ5u2EPYq6_d","colab_type":"code","colab":{}},"source":["def train(epoch):\n","    model.train()\n","    tr_loss = 0\n","    # getting the training set\n","    x_train, y_train = Variable(train_x), Variable(train_y)\n","    # getting the validation set\n","    x_val, y_val = Variable(val_x), Variable(val_y)\n","    # converting the data into GPU format\n","    if torch.cuda.is_available():\n","        x_train = x_train.cuda()\n","        y_train = y_train.cuda()\n","        x_val = x_val.cuda()\n","        y_val = y_val.cuda()\n","\n","    # clearing the Gradients of the model parameters\n","    optimizer.zero_grad()\n","    \n","    # prediction for training and validation set\n","    output_train = model(x_train)\n","    output_val = model(x_val)\n","\n","    # computing the training and validation loss\n","    loss_train = criterion(output_train, y_train)\n","    loss_val = criterion(output_val, y_val)\n","    train_losses.append(loss_train)\n","    val_losses.append(loss_val)\n","\n","    # computing the updated weights of all the model parameters\n","    loss_train.backward()\n","    optimizer.step()\n","    tr_loss = loss_train.item()\n","    if epoch%2 == 0:\n","        # printing the validation loss\n","        print('Epoch : ',epoch+1, '\\t', 'loss :', loss_val)"],"execution_count":0,"outputs":[]}]}